#include "ProgramModules.h"
#include "common.h"
#include <boost/algorithm/string.hpp>
#include <math>

//constructor
VcfBedInput::VcfBedInput() {}

//main function accepts a be or vcf file, stores the regions and return them as a vector of queue of int
queue<string> VcfBedInput::findRegions(string inputFileName, int selection){
	queue<string> regions;
	if(selection ==1 ){
		regions=readVCF(inputFileName);
	}else if(selection ==2){
		regions=readBed(inputFileName);
	}
	return(regions);
}
//reads vcf generated by FindTranslocations files and returns the regions
queue<string> VcfBedInput::readVCF(string inputFileName){
	queue<string> regions;
	int VCFheader=0;
	string line;

	//opens the input file and reads each line
	ifstream inputFile( inputFileName.c_str() );
	if (inputFile){
		while (getline( inputFile, line )){
			//splits on tab
			vector<std::string> splitline;
			boost::split(splitline, line, boost::is_any_of("\t"));


			//make sure that the reader is not collecting values from the metadata of the vcf file
			if(VCFheader != 0){
				string INFOLine;
				//extract the info line
				INFOLine=splitline[7];
			
				//get the region from the info line
				vector<std::string> splitINFOLine;
				boost::split(splitINFOLine, INFOLine, boost::is_any_of(";"));
				for(int i =0;i<2;i++){
					vector<std::string> chromosomeVector;
					boost::split(chromosomeVector,splitINFOLine[1+2*i], boost::is_any_of("="));
					//extract the chromosome
					regions.push(chromosomeVector[1]);
					//extracts the start position on the given chromosome
					vector<std::string> positionVector;
					boost::split(positionVector,splitINFOLine[2+2*i], boost::is_any_of("="));
					boost::split(positionVector,positionVector[1], boost::is_any_of(","));
					regions.push(positionVector[0]);
					//extracts the end position on the given chromosome
					regions.push(positionVector[1]);
				}

			}else{
				if(splitline[0] == "#CHROM"){
					VCFheader =1;
				}
			
			}
		}
		inputFile.close();
	}
	return(regions);
}

//reads bed files and returns the regions o the file
queue<string> VcfBedInput::readBed(string inputFileName){
	queue<string> regions;
	int bedHeader=0;
	string line;

	//opens the input file and reads each line
	ifstream inputFile( inputFileName.c_str() );
	if (inputFile){
		while (getline( inputFile, line )){
			//splits on tab
			vector<std::string> splitline;
			boost::split(splitline, line, boost::is_any_of("\t"));

				//get the region from the info line
				if(splitline.size() >= 3){
					//extract the chromosome
					regions.push(splitline[0]);
					//extracts the start position on the given chromosome
					regions.push(splitline[1]);
					//extracts the end position on the given chromosome
					regions.push(splitline[2]);
				}
			
		}
		
		inputFile.close();
	}

	return(regions);
}
